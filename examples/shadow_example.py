# -*- coding: utf-8 -*-
"""Shadow_Example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5H-KS3u0D0VWBq7mN853GTir0y3mDQm
"""

import matplotlib.pyplot as plt

from src.utils.solarposition import *
from src.utils.shadowingfunction_wallheight_13 import shadowingfunction_wallheight_13

"""# Load Numpy array"""

# dsm is a map that represents elevation information
dsm_data_path = os.path.join(
    os.path.dirname(os.path.abspath(__file__)),
    "../src/data/dsm_local_array.npy"
)
dsm = np.load(dsm_data_path)
dsm = np.nan_to_num(dsm, nan=0)

f, ax = plt.subplots()

plt.imshow(dsm, cmap='viridis')

plt.show()

"""# Sun's position"""

# Sun position
# https://github.com/pvlib/pvlib-python

lon = -95.30052
lat = 29.73463

utc_offset = -6

# Create a date range from 6:00 to 20:00 with a 10-minute interval
timestamps = pd.date_range('2023-09-12 11:00', '2023-09-12 11:10', freq='30T')
# current_datetime = datetime.now()
# end_datetime = current_datetime + pd.DateOffset(minutes=10)
# timestamps = pd.date_range(current_datetime, end_datetime, freq='30T')

# Create a DataFrame using the timestamps as a column
df_solar_data = pd.DataFrame({'TimeStamp': timestamps})

# UTC time
df_solar_data['TimeStamp'] = pd.DatetimeIndex(df_solar_data['TimeStamp']) - pd.DateOffset(hours=utc_offset)

# To_Datetime
df_solar_data["TimeStamp"] = df_solar_data["TimeStamp"].apply(pd.to_datetime)
df_solar_data.set_index("TimeStamp", inplace=True)

# Add time index
df_solar_data["TimeStamp"] = df_solar_data.index

df_solar_data.head()

# Get_sun's position df
df_solar = get_solarposition(df_solar_data.index, lat, lon)

# Add time index
df_solar['TimeStamp'] = pd.DatetimeIndex(df_solar.index) + pd.DateOffset(hours=utc_offset)

df_solar = df_solar[['TimeStamp', 'apparent_zenith', 'zenith', 'apparent_elevation', 'elevation',
                     'azimuth', 'equation_of_time']]

# To_Datetime
df_solar["TimeStamp"] = df_solar["TimeStamp"].apply(pd.to_datetime)
df_solar.set_index("TimeStamp", inplace=True)

df_solar.head()

df_solar["TimeStamp"] = df_solar.index
df_solar = df_solar[['TimeStamp', 'elevation', 'zenith', 'azimuth']]

df_solar = df_solar.rename(columns={"elevation": "Elevation", "azimuth": "Azimuth", "zenith": "Zenith"})

df_solar.head()

"""# Walls and Height"""

# Temporally !
scale = 1
walls = np.zeros((dsm.shape[0], dsm.shape[1]))
dirwalls = np.zeros((dsm.shape[0], dsm.shape[1]))


"""# Shadow"""

i = 0

altitude = df_solar['Elevation'][i]
azimuth = df_solar['Azimuth'][i]

hour = df_solar.index[i].hour
minute = df_solar.index[i].minute

print(hour, minute)

sh, wallsh, wallsun, facesh, facesun = shadowingfunction_wallheight_13(dsm, azimuth, altitude, scale, walls,
                                                                       dirwalls * np.pi / 180.)

f, ax = plt.subplots(dpi=500)

plt.imshow(sh, cmap='viridis')

plt.title("%2s" % str(hour).zfill(2) + ":%2s" % str(minute).zfill(2), pad=10, fontsize=15, color="black", weight='bold')


df = pd.DataFrame(sh)

df.head()
